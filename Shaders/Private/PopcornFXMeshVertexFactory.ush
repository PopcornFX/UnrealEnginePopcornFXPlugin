//----------------------------------------------------------------------------
// Copyright Persistant Studios, SARL. All Rights Reserved.
// https://www.popcornfx.com/terms-and-conditions/
//----------------------------------------------------------------------------

#include "/Engine/Public/Platform.ush"

/*=============================================================================
	PopcornFXMeshVertexFactory.ush: PopcornFX Vertex factory shader code (CPU billboarded Meshes)
=============================================================================*/

#include "/Engine/Private/VertexFactoryCommon.ush"

// These are only enabled for SM5 due to limited interpolators elsewhere
#define USE_PARTICLE_POSITION ((NEEDS_PARTICLE_POSITION || PASS_NEEDS_PRIMITIVE_VOLUME_BOUNDS))
#define USE_PARTICLE_TIME (NEEDS_PARTICLE_TIME)

#define USE_PARTICLE_LOCAL_TO_WORLD (NEEDS_PARTICLE_LOCAL_TO_WORLD || NEEDS_INSTANCE_LOCAL_TO_WORLD_PS)
#define USE_PARTICLE_WORLD_TO_LOCAL (NEEDS_PARTICLE_WORLD_TO_LOCAL || NEEDS_INSTANCE_WORLD_TO_LOCAL_PS)

struct FVertexFactoryInput
{
	float4	Position : ATTRIBUTE0;
	half3	TangentX : ATTRIBUTE1;
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ : ATTRIBUTE2;
	half4	VertexColor : ATTRIBUTE3;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX] : ATTRIBUTE4;
#endif

	float4 Transform1 : ATTRIBUTE8;
	float4 Transform2 : ATTRIBUTE9;
	float4 Transform3 : ATTRIBUTE10;
	float4 Transform4 : ATTRIBUTE11;

	float4 ParticleColor : ATTRIBUTE12;

	float VATCursor : ATTRIBUTE13;

#if (DYNAMIC_PARAMETERS_MASK & 1)
	float4 DynamicParameter		: ATTRIBUTE14;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	float4 DynamicParameter1	: ATTRIBUTE15;
#endif
#if 0//(DYNAMIC_PARAMETERS_MASK & 4)
	float4 DynamicParameter2	: ATTRIBUTE16;
#endif
	
	uint InstanceId	: SV_InstanceID;
};

struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK

#if NUM_TEX_COORD_INTERPOLATORS
		#if (ES2_PROFILE || ES3_1_PROFILE)
			// Avoid dependent texture fetches, put all UVs in xy
			float2	TexCoords[NUM_TEX_COORD_INTERPOLATORS] : TEXCOORD0;
		#else
			float4	TexCoords[(NUM_TEX_COORD_INTERPOLATORS+1)/2] : TEXCOORD0;
		#endif
#endif

#if INTERPOLATE_VERTEX_COLOR
	float4	VertexColor : COLOR0;
#endif

#if NEEDS_PARTICLE_COLOR
	float4	ParticleColor : COLOR1;
#endif

	float	VATCursor : PARTICLE_TIME;

#if (DYNAMIC_PARAMETERS_MASK & 1)
	float4	DynamicParameter : COLOR2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	float4	DynamicParameter1 : COLOR3;
#endif
#if 0//(DYNAMIC_PARAMETERS_MASK & 4)
	float4	DynamicParameter2 : COLOR4;
#endif
//#if (DYNAMIC_PARAMETERS_MASK & 8)
//	float4	DynamicParameter3 : PARTICLE_DYNAMIC_PARAM3;
//#endif

#if USE_PARTICLE_POSITION
	/** Particle position in camera-centered translated world space */
	float3 ParticleTranslatedWorldPosition	: PARTICLE_POSITION;
#endif

#if NEEDS_PARTICLE_TRANSFORM
	float4 LocalToWorld[4] : PARTICLE_TRANSFORM;
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
	nointerpolation float3x4 ParticleToWorld : PARTICLE_LOCAL_TO_WORLD;
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
	nointerpolation float3x4 WorldToParticle : PARTICLE_WORLD_TO_LOCAL;
#endif

#if INSTANCED_STEREO
	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;
#endif
};

struct FVertexFactoryIntermediates
{
	/** The color of the vertex. */
	float4	VertexColor;

	/** The color of the particle. */
	float4	ParticleColor;

	float	VATCursor;
	
#if (DYNAMIC_PARAMETERS_MASK & 1)
	float4	DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	float4	DynamicParameter1;
#endif
#if 0//(DYNAMIC_PARAMETERS_MASK & 4)
	float4	DynamicParameter2;
#endif
//#if (DYNAMIC_PARAMETERS_MASK & 8)
//	float4	DynamicParameter3;
//#endif

	/** The texture coordinates for the vertex. */
#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX];
#endif

	/** Particle position in camera-centered translated world space. */
	float3	ParticleTranslatedWorldPosition;

#if NEEDS_PARTICLE_TRANSFORM
	float4	LocalToWorld[4];
#endif

	float4x4	ParticleToWorld;
	float4x4	WorldToParticle;

#if (ENGINE_MAJOR_VERSION == 5)
	/** Cached primitive and instance data */
	FSceneDataIntermediates SceneData;
#endif // (ENGINE_MAJOR_VERSION == 5)
};

float4x4 GetParticleTransform(FVertexFactoryInput Input)
{
	return float4x4(Input.Transform1, Input.Transform2, Input.Transform3, Input.Transform4);
}

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 PixelPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS
	#if (ES2_PROFILE || ES3_1_PROFILE)
		UNROLL
		for( int CoordinateIndex = 0; CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS; CoordinateIndex++ )
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.TexCoords[CoordinateIndex].xy;
		}
	#else
		UNROLL
		for(int CoordinateIndex = 0;CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex += 2)
		{
			Result.TexCoords[CoordinateIndex] = Interpolants.TexCoords[CoordinateIndex/2].xy;

			if(CoordinateIndex + 1 < NUM_TEX_COORD_INTERPOLATORS)
			{
				Result.TexCoords[CoordinateIndex + 1] = Interpolants.TexCoords[CoordinateIndex/2].wz;
			}
		}
	#endif
#endif

	half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.UnMirrored = TangentToWorld2.w;

#if INTERPOLATE_VERTEX_COLOR
	Result.VertexColor = Interpolants.VertexColor;
#else
	Result.VertexColor = 0;
#endif

#if NEEDS_PARTICLE_COLOR
	Result.Particle.Color = Interpolants.ParticleColor;
#endif
	Result.Particle.RelativeTime = Interpolants.VATCursor;

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = 0x1 | 0x2 | 0x4; // Add them all, we don't have that info yet. TODO
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Interpolants.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Interpolants.DynamicParameter1;
#endif
#if 0//(DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Interpolants.DynamicParameter2;
#endif
//#if (DYNAMIC_PARAMETERS_MASK & 8)
//	Result.Particle.DynamicParameter3 = Interpolants.DynamicParameter3;
//#endif

#if USE_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize.xyz = Interpolants.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;
#endif

#if (ENGINE_MAJOR_VERSION == 5)
#	if USE_PARTICLE_LOCAL_TO_WORLD
	Result.Particle.ParticleToWorld = LWCPromote(transpose(float4x4(Interpolants.ParticleToWorld[0], Interpolants.ParticleToWorld[1], Interpolants.ParticleToWorld[2], float4(0.0f, 0.0f, 0.0f, 1.0f))));
#		if NEEDS_INSTANCE_LOCAL_TO_WORLD_PS
	Result.InstanceLocalToWorld = Result.Particle.ParticleToWorld;
#		endif // NEEDS_INSTANCE_LOCAL_TO_WORLD_PS
#	endif // USE_PARTICLE_LOCAL_TO_WORLD

#	if USE_PARTICLE_WORLD_TO_LOCAL
	Result.Particle.WorldToParticle = LWCPromoteInverse(transpose(float4x4(Interpolants.WorldToParticle[0], Interpolants.WorldToParticle[1], Interpolants.WorldToParticle[2], float4(0.0f, 0.0f, 0.0f, 1.0f))));
#		if NEEDS_INSTANCE_WORLD_TO_LOCAL_PS
	Result.InstanceWorldtoLocal = Result.Particle.WorldToParticle;
#		endif // NEEDS_INSTANCE_WORLD_TO_LOCAL_PS
#	endif // USE_PARTICLE_WORLD_TO_LOCAL
#else

#	if NEEDS_PARTICLE_TRANSFORM
	Result.Particle.LocalToWorld[0] = Interpolants.LocalToWorld[0];
	Result.Particle.LocalToWorld[1] = Interpolants.LocalToWorld[1];
	Result.Particle.LocalToWorld[2] = Interpolants.LocalToWorld[2];
	Result.Particle.LocalToWorld[3] = Interpolants.LocalToWorld[3];
#	endif // NEEDS_PARTICLE_TRANSFORM

#	if USE_PARTICLE_LOCAL_TO_WORLD
	Result.Particle.ParticleToWorld = transpose(float4x4(
		Interpolants.ParticleToWorld[0],
		Interpolants.ParticleToWorld[1],
		Interpolants.ParticleToWorld[2],
		float4(0.0f, 0.0f, 0.0f, 1.0f)));
#	endif // USE_PARTICLE_LOCAL_TO_WORLD

#	if USE_PARTICLE_WORLD_TO_LOCAL
	Result.Particle.WorldToParticle = transpose(float4x4(
		Interpolants.WorldToParticle[0],
		Interpolants.WorldToParticle[1],
		Interpolants.WorldToParticle[2],
		float4(0.0f, 0.0f, 0.0f, 1.0f)));
#	endif // USE_PARTICLE_WORLD_TO_LOCAL
#endif // (ENGINE_MAJOR_VERSION == 5)

	Result.Particle.MotionBlurFade = 1.0f;
	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);
	Result.TwoSidedSign = 1;

#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif

	return Result;
}

float4x4 InverseTransform(float4x4 InTransform)
{
	// Extract and invert scale	
	float3	invScale = 1. / float3(length(InTransform[0].xyz), length(InTransform[1].xyz), length(InTransform[2].xyz));

	// Build inv. scale matrix
	float4x4	invScale44 = float4x4(	invScale.x, 0.0f, 0.0f, 0.0f,
										0.0f, invScale.y, 0.0f, 0.0f,
										0.0f, 0.0f, invScale.z, 0.0f,
										0.0f, 0.0f, 0.0f, 1.0f);

	// Apply inverse scale (normalize matrix axis)
	InTransform = mul(invScale44, InTransform);

	// Transpose the matrix (since it has no more scale and we ignore position, it's the inverse rotation matrix)
	float4x4	invRot44 = transpose(InTransform);

	float4x4	invTrans44 = float4x4(	1.0f, 0.0f, 0.0f, 0.0f,
										0.0f, 1.0f, 0.0f, 0.0f,
										0.0f, 0.0f, 1.0f, 0.0f,
										-InTransform[3].xyz, 1.0f);

	return mul(invTrans44, mul(invRot44, invScale44));
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
#if (ENGINE_MAJOR_VERSION == 5)
	Result.SceneData = Intermediates.SceneData;
#endif // (ENGINE_MAJOR_VERSION == 5)
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.VertexColor;
	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentBias(Input.TangentZ.xyz);

	Result.Particle.Color = Intermediates.ParticleColor;
	Result.Particle.RelativeTime = Intermediates.VATCursor;

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = 0x1 | 0x2 | 0x4; // Add them all, we don't have that info yet. TODO
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if 0//(DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
//#if (DYNAMIC_PARAMETERS_MASK & 8)
//	Result.Particle.DynamicParameter3 = Intermediates.DynamicParameter3;
//#endif

	Result.Particle.TranslatedWorldPositionAndSize.xyz = Intermediates.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;

#if (ENGINE_MAJOR_VERSION == 5)
	float4x4	_transform = GetParticleTransform(Input);
	FLWCMatrix	Transform = LWCPromote(_transform);
#else
	float4x4 Transform = GetParticleTransform(Input);
#endif // (ENGINE_MAJOR_VERSION == 5)

	Result.InstanceLocalToWorld = Transform;
#if (ENGINE_MAJOR_VERSION == 5)
	Result.InstanceWorldToLocal = LWCPromoteInverse(InverseTransform(_transform));
#else
#	if NEEDS_PARTICLE_TRANSFORM
	Result.Particle.LocalToWorld[0] = Transform[0];
	Result.Particle.LocalToWorld[1] = Transform[1];
	Result.Particle.LocalToWorld[2] = Transform[2];
	Result.Particle.LocalToWorld[3] = Transform[3];
#	endif // NEEDS_PARTICLE_TRANSFORM
#endif // (ENGINE_MAJOR_VERSION == 5)

#if (ENGINE_MAJOR_VERSION == 5)
	Result.TangentToWorld = mul(TangentToLocal, (float3x3)_transform);
#else
	Result.TangentToWorld = mul(TangentToLocal, (float3x3)Transform);
#endif // (ENGINE_MAJOR_VERSION == 5)

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Intermediates.TexCoords[CoordinateIndex];
	}
#endif

	Result.Particle.ParticleToWorld = Transform;
#if (ENGINE_MAJOR_VERSION == 5)
	Result.Particle.WorldToParticle = Result.InstanceWorldToLocal;
#else
	Result.Particle.WorldToParticle = InverseTransform(Transform);
#endif // (ENGINE_MAJOR_VERSION == 5)
	return Result;
}

float4 CalcWorldPosition(FVertexFactoryInput Input)
{
	float4x4 Transform = GetParticleTransform(Input);
#if (ENGINE_MAJOR_VERSION == 5)
	float3 WorldPosition = mul(Input.Position, Transform).xyz + LWCHackToFloat(ResolvedView.PreViewTranslation);
#else
	float3 WorldPosition = mul(Input.Position, Transform).xyz + ResolvedView.PreViewTranslation;
#endif // (ENGINE_MAJOR_VERSION == 5)
	return float4(WorldPosition, Input.Position.w);
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
#if (ENGINE_MAJOR_VERSION == 5)
	Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
#endif // (ENGINE_MAJOR_VERSION == 5)
	// Swizzle vertex color.
	Intermediates.VertexColor = Input.VertexColor FCOLOR_COMPONENT_SWIZZLE;

	// World position.
	float3 ParticleWorldPosition = Input.Transform4.xyz;
#if NEEDS_PARTICLE_TRANSFORM
	float4x4 LocalToWorldMat = float4x4(Input.Transform1, Input.Transform2, Input.Transform3, float4(0.0f, 0.0f, 0.0f, 1.0f));
	Intermediates.LocalToWorld[0] = LocalToWorldMat[0];
	Intermediates.LocalToWorld[1] = LocalToWorldMat[1];
	Intermediates.LocalToWorld[2] = LocalToWorldMat[2];
	Intermediates.LocalToWorld[3] = LocalToWorldMat[3];
#endif

#if (ENGINE_MAJOR_VERSION == 5)
	Intermediates.ParticleTranslatedWorldPosition = ParticleWorldPosition + LWCHackToFloat(ResolvedView.PreViewTranslation).xyz;
#else
	Intermediates.ParticleTranslatedWorldPosition = ParticleWorldPosition + ResolvedView.PreViewTranslation.xyz;
#endif // (ENGINE_MAJOR_VERSION == 5)

	Intermediates.ParticleColor = Input.ParticleColor;
	Intermediates.VATCursor = Input.VATCursor;

#	if (DYNAMIC_PARAMETERS_MASK & 1)
		Intermediates.DynamicParameter = Input.DynamicParameter;
#	endif
#	if (DYNAMIC_PARAMETERS_MASK & 2)
		Intermediates.DynamicParameter1 = Input.DynamicParameter1;
#	endif
#	if 0//(DYNAMIC_PARAMETERS_MASK & 4)
		Intermediates.DynamicParameter2 = Input.DynamicParameter2;
#	endif
//#	if (DYNAMIC_PARAMETERS_MASK & 8)
//		Intermediates.DynamicParameter3 = Input.DynamicParameter3;
//#	endif

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Intermediates.TexCoords[CoordinateIndex] = Input.TexCoords[CoordinateIndex].xy;
	}
#endif

	float4x4 ParticleToWorld = float4x4(Input.Transform1, Input.Transform2, Input.Transform3, float4(0.0f, 0.0f, 0.0f, 1.0f));
	float4x4 WorldToParticle = InverseTransform(ParticleToWorld);

	Intermediates.ParticleToWorld = ParticleToWorld;
	Intermediates.WorldToParticle = WorldToParticle;
	return Intermediates;
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3x3 Result = 0;
	float4 TangentZ = TangentBias(Input.TangentZ);

	// pass-thru the tangent
	Result[0] = TangentBias(Input.TangentX);
	// pass-thru the normal
	Result[2] = TangentZ.xyz;


	// derive the binormal by getting the cross product of the normal and tangent
	Result[1] = cross(Result[2], Result[0]) * TangentZ.w;
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	Result[0] = cross(Result[1], Result[2]) * TangentZ.w;

	return Result;
}

// @return translated world position
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input);
}

// since 4.12
float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, Intermediates);

	float4x4 Transform = GetParticleTransform(Input);
	float3x3 TangentToWorld = mul(TangentToLocal, (float3x3)Transform);

	// Normalize to remove scaling. Incorrect but faster than computing the inverse-transpose.
	TangentToWorld0 = normalize(TangentToWorld[0]);
#if (ENGINE_MAJOR_VERSION == 5)
	TangentToWorld2 = float4(normalize(TangentToWorld[2]), TangentBias(Input.TangentZ.w) * GetPrimitive_DeterminantSign_FromFlags(Primitive.Flags));
#else
	TangentToWorld2 = float4(normalize(TangentToWorld[2]), TangentBias(Input.TangentZ.w) * Primitive.InvNonUniformScaleAndDeterminantSign.w);
#endif // (ENGINE_MAJOR_VERSION == 5)
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

#if NUM_TEX_COORD_INTERPOLATORS
	#if (ES2_PROFILE || ES3_1_PROFILE)
		float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
		GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
		GetCustomInterpolators(VertexParameters, CustomizedUVs);
		
		UNROLL
		for(int CoordinateIndex = 0;CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS;++CoordinateIndex)
		{
			Interpolants.TexCoords[CoordinateIndex] = CustomizedUVs[CoordinateIndex];
		}
	#else
		// Ensure the unused components of the last packed texture coordinate are initialized.
		Interpolants.TexCoords[(NUM_TEX_COORD_INTERPOLATORS + 1) / 2 - 1] = 0;

		float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
		GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
		GetCustomInterpolators(VertexParameters, CustomizedUVs);

		UNROLL
		for(int CoordinateIndex = 0;CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex += 2)
		{
			Interpolants.TexCoords[CoordinateIndex / 2].xy = CustomizedUVs[CoordinateIndex];
			if(CoordinateIndex + 1 < NUM_TEX_COORD_INTERPOLATORS)
			{
				Interpolants.TexCoords[CoordinateIndex / 2].wz = CustomizedUVs[CoordinateIndex + 1];
			}
		}
	#endif
#endif

	Interpolants.TangentToWorld0.w = 0;
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Interpolants.TangentToWorld2_Center = Interpolants.TangentToWorld2;
#endif

#if INTERPOLATE_VERTEX_COLOR
	Interpolants.VertexColor = Intermediates.VertexColor;
#endif

#if NEEDS_PARTICLE_COLOR
	Interpolants.ParticleColor = Intermediates.ParticleColor;
#endif
	Interpolants.VATCursor = Intermediates.VATCursor;

#if (DYNAMIC_PARAMETERS_MASK & 1)
	Interpolants.DynamicParameter = Intermediates.DynamicParameter;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Interpolants.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if 0//(DYNAMIC_PARAMETERS_MASK & 4)
	Interpolants.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
//#if (DYNAMIC_PARAMETERS_MASK & 8)
//	Interpolants.DynamicParameter3 = Intermediates.DynamicParameter3;
//#endif

#if USE_PARTICLE_POSITION
	Interpolants.ParticleTranslatedWorldPosition = Intermediates.ParticleTranslatedWorldPosition;
#endif
#if NEEDS_PARTICLE_TRANSFORM
	Interpolants.LocalToWorld = Intermediates.LocalToWorld;
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
	Interpolants.ParticleToWorld = (float3x4) transpose(Intermediates.ParticleToWorld);
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
	Interpolants.WorldToParticle = (float3x4) transpose(Intermediates.WorldToParticle);
#endif

#if INSTANCED_STEREO
	Interpolants.EyeIndex = 0;
#endif

	return Interpolants;
}

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	// The previous local to world instance transform isn't available.
	return CalcWorldPosition(Input);
}

#if USING_TESSELLATION
struct FVertexFactoryInterpolantsVSToDS
{
	FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
};

float2 VertexFactoryGetTextureCoordinateDS(FVertexFactoryInterpolantsVSToDS Interpolants)
{
#if NUM_MATERIAL_TEXCOORDS
	return Interpolants.InterpolantsVSToPS.TexCoords[0].xy;
#else // #if NUM_MATERIAL_TEXCOORDS
	return float2(0, 0);
#endif // #if NUM_MATERIAL_TEXCOORDS
}

FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
{
	return Input.InterpolantsVSToPS;
}

/** Converts from vertex factory specific interpolants to a FMaterialTessellationParameters, which is used by material inputs. */
FMaterialTessellationParameters GetMaterialTessellationParameters(FVertexFactoryInterpolantsVSToDS Interpolants, float3 CameraLocalWorldPosition)
{
	FMaterialTessellationParameters	Result;
#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex += 2)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].xy;
		if(CoordinateIndex + 1 < NUM_TEX_COORD_INTERPOLATORS)
		{
			Result.TexCoords[CoordinateIndex + 1] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].wz;
		}
	}
#endif

	Result.VertexColor = float4(1, 1, 1, 1);

	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);
	Result.TangentToWorldPreScale = 1;
	Result.WorldPosition = CameraLocalWorldPosition + ResolvedView.WorldCameraOrigin.xyz;

	return Result;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToDS Interpolants;
	Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
	return Interpolants;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryInterpolate(FVertexFactoryInterpolantsVSToDS a, float aInterp, FVertexFactoryInterpolantsVSToDS b, float bInterp)
{
	FVertexFactoryInterpolantsVSToDS O;

	// Do we really need to interpolate TangentToWorld2 here? It should be replaced by the
	// interpolated normal from 'whatever' interpolation scheme we're using

	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld0.xyz);
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld2);
#if INTERPOLATE_VERTEX_COLOR
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.VertexColor);
#endif

#if NEEDS_PARTICLE_COLOR
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.ParticleColor);
#endif

#if NUM_TEX_COORD_INTERPOLATORS
	for (int i = 0; i < (NUM_TEX_COORD_INTERPOLATORS + 1) / 2; ++i)
	{
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TexCoords[i]);
	}
#endif

	return O;
}

float3x3 VertexFactoryGetTangentToLocalDS(FVertexFactoryInterpolantsVSToDS Interpolants)
{
	// This duplicates stuff already going on in GetMaterialTessellationParameters(), so
	// maybe the hull shader could leverage that instead?
	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
	float3x3 TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);

	return TangentToWorld;
}
#endif // #if USING_TESSELLATION

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return TangentBias(Input.TangentZ.xyz);
}

#if (ENGINE_MAJOR_VERSION == 5)
#	include "/Engine/Private/VertexFactoryDefaultInterface.ush"
#endif // (ENGINE_MAJOR_VERSION == 5)