//----------------------------------------------------------------------------
// Copyright Persistant Studios, SARL. All Rights Reserved.
// https://www.popcornfx.com/terms-and-conditions/
//----------------------------------------------------------------------------

#include "/Engine/Public/Platform.ush"

/*=============================================================================
	PopcornFXSkeletalMeshVertexFactory.ush: PopcornFX Vertex factory shader code (CPU billboarded Skeletal Meshes)
=============================================================================*/

#include "/Engine/Private/VertexFactoryCommon.ush"
#include "PopcornFXCommon.ush"
#include "PopcornFXGPUSkinningCommon.ush"

// These are only enabled for SM5 due to limited interpolators elsewhere
#define USE_PARTICLE_POSITION ((NEEDS_PARTICLE_POSITION || PASS_NEEDS_PRIMITIVE_VOLUME_BOUNDS))
#define USE_PARTICLE_TIME (NEEDS_PARTICLE_TIME)

#define USE_PARTICLE_LOCAL_TO_WORLD (NEEDS_PARTICLE_LOCAL_TO_WORLD || NEEDS_INSTANCE_LOCAL_TO_WORLD_PS)
#define USE_PARTICLE_WORLD_TO_LOCAL (NEEDS_PARTICLE_WORLD_TO_LOCAL || NEEDS_INSTANCE_WORLD_TO_LOCAL_PS)

uint	BoneIndicesReorderOffset;

#if PREBUILD_BONE_TRANSFORMS
Buffer<float4> 	BoneMatrices;
Buffer<float4> 	PreviousBoneMatrices; // If MotionBlur is disabled, BoneMatrices is bound instead
#endif

struct FVertexFactoryInput
{
	float4	Position			: ATTRIBUTE0;
	half3	TangentX			: ATTRIBUTE1;
	// TangentZ.w contains sign of tangent basis determinant
	half4	TangentZ			: ATTRIBUTE2;
	half4	VertexColor			: ATTRIBUTE3;

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords0 : ATTRIBUTE4;
	#if NUM_MATERIAL_TEXCOORDS_VERTEX > 1
		float2	TexCoords1 : ATTRIBUTE5;
	#endif
	#if NUM_MATERIAL_TEXCOORDS_VERTEX > 2
		float2	TexCoords2 : ATTRIBUTE6;
	#endif
	#if NUM_MATERIAL_TEXCOORDS_VERTEX > 3
		float2	TexCoords3 : ATTRIBUTE7;
	#endif
#endif // NUM_MATERIAL_TEXCOORDS_VERTEX


	uint4	BoneIndices			: ATTRIBUTE8;
	float4	BoneWeights			: ATTRIBUTE9;

	uint InstanceId	: SV_InstanceID;
};

struct FVertexFactoryInterpolantsVSToPS
{
	TANGENTTOWORLD_INTERPOLATOR_BLOCK

#if NUM_TEX_COORD_INTERPOLATORS
#	if NUM_TEX_COORD_INTERPOLATORS
	float4	TexCoords[(NUM_TEX_COORD_INTERPOLATORS+1)/2] : TEXCOORD0;
#	endif
#endif

#if INTERPOLATE_VERTEX_COLOR
	float4	VertexColor : COLOR0;
#endif

#if NEEDS_PARTICLE_COLOR
	nointerpolation float4	ParticleColor : COLOR1;
#endif
	nointerpolation float3	EmissiveColor : COLOR6;

	nointerpolation float	Cursor : PARTICLE_TIME;

#if (DYNAMIC_PARAMETERS_MASK & 1)
	nointerpolation float4	DynamicParameter0 : COLOR2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	nointerpolation float4	DynamicParameter1 : COLOR3;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	nointerpolation float4	DynamicParameter2 : COLOR4;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	nointerpolation float4	DynamicParameter3 : COLOR5;
#endif

#if USE_PARTICLE_POSITION
	/** Particle position in camera-centered translated world space */
	nointerpolation float3 ParticleTranslatedWorldPosition	: PARTICLE_POSITION;
#endif

#if NEEDS_PARTICLE_TRANSFORM
	nointerpolation float4 LocalToWorld[4] : PARTICLE_TRANSFORM;
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
	nointerpolation float3x4 ParticleToWorld : PARTICLE_LOCAL_TO_WORLD;
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
	nointerpolation float3x4 WorldToParticle : PARTICLE_WORLD_TO_LOCAL;
#endif

#if INSTANCED_STEREO
	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;
#endif

#if USE_PARTICLE_SUBUVS
	nointerpolation float4	AtlasRect : COLOR7;
#endif
};

struct FVertexFactoryIntermediates
{
	/** The color of the vertex. */
	float4	VertexColor;

	/** The color of the particle. */
	float4	ParticleColor;

	float3	EmissiveColor;

	/** AlphaRemap cursor */
	float	Cursor;
	
#if (DYNAMIC_PARAMETERS_MASK & 1)
	float4	DynamicParameter0;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	float4	DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	float4	DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	float4	DynamicParameter3;
#endif

	/** The texture coordinates for the vertex. */
#if NUM_MATERIAL_TEXCOORDS_VERTEX
	float2	TexCoords[NUM_MATERIAL_TEXCOORDS_VERTEX];
#endif

	/** Particle position in camera-centered translated world space. */
	float3	ParticleTranslatedWorldPosition;

#if NEEDS_PARTICLE_TRANSFORM
	float4	LocalToWorld[4];
#endif

	float4x4	ParticleToWorld;
	float4x4	WorldToParticle;
	float4x4	PrevParticleToWorld;

#if (ENGINE_MAJOR_VERSION == 5)
	/** Cached primitive and instance data */
	FSceneDataIntermediates SceneData;
#endif // (ENGINE_MAJOR_VERSION == 5)

	float3x4	SkinningMatrix;
	float3x4	PrevSkinningMatrix;
	float3x3	TangentToLocal;

	float4		AtlasRect;
};

float4x4 GetParticleTransform(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.ParticleToWorld;
}

float4x4 GetPrevParticleTransform(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.PrevParticleToWorld;
}

/** Converts from vertex factory specific interpolants to a FMaterialPixelParameters, which is used by material inputs. */
FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 PixelPosition)
{
	// GetMaterialPixelParameters is responsible for fully initializing the result
	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();

#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex * 2 + 1 < NUM_TEX_COORD_INTERPOLATORS; ++CoordinateIndex)
	{
		Result.TexCoords[CoordinateIndex * 2] = Interpolants.TexCoords[CoordinateIndex].xy;
		Result.TexCoords[CoordinateIndex * 2 + 1] = Interpolants.TexCoords[CoordinateIndex].wz;
	}
#	if NUM_TEX_COORD_INTERPOLATORS & 1
		Result.TexCoords[NUM_TEX_COORD_INTERPOLATORS - 1] = Interpolants.TexCoords[NUM_TEX_COORD_INTERPOLATORS / 2].xy;
#	endif // #if NUM_TEX_COORD_INTERPOLATORS & 1
#endif

	half3 TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.UnMirrored = TangentToWorld2.w;

#if INTERPOLATE_VERTEX_COLOR
	Result.VertexColor = Interpolants.VertexColor;
#else
	Result.VertexColor = 0;
#endif

#if NEEDS_PARTICLE_COLOR
	Result.Particle.Color = Interpolants.ParticleColor;
#endif
#if USE_PARTICLE_SUBUVS
	Result.Particle.SubUVCoords[0] = Interpolants.EmissiveColor.xy;
	Result.Particle.SubUVCoords[1] = float2(Interpolants.EmissiveColor.z, Interpolants.AtlasRect.x);
	Result.Particle.SubUVLerp = Interpolants.AtlasRect.y;
	Result.Particle.Size = Interpolants.AtlasRect.zw;
#endif
	Result.Particle.RelativeTime = Interpolants.Cursor;

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = PopcornFXUniforms.DynamicParameterMask;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Interpolants.DynamicParameter0;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Interpolants.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Interpolants.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Result.Particle.DynamicParameter3 = Interpolants.DynamicParameter3;
#endif

#if USE_PARTICLE_POSITION
	Result.Particle.TranslatedWorldPositionAndSize.xyz = Interpolants.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;
#endif

#if (ENGINE_MAJOR_VERSION == 5)
#	if USE_PARTICLE_LOCAL_TO_WORLD
	Result.Particle.ParticleToWorld = LWCPromote(transpose(float4x4(Interpolants.ParticleToWorld[0], Interpolants.ParticleToWorld[1], Interpolants.ParticleToWorld[2], float4(0.0f, 0.0f, 0.0f, 1.0f))));
#		if NEEDS_INSTANCE_LOCAL_TO_WORLD_PS
	Result.InstanceLocalToWorld = Result.Particle.ParticleToWorld;
#		endif // NEEDS_INSTANCE_LOCAL_TO_WORLD_PS
#	endif // USE_PARTICLE_LOCAL_TO_WORLD

#	if USE_PARTICLE_WORLD_TO_LOCAL
	Result.Particle.WorldToParticle = LWCPromoteInverse(transpose(float4x4(Interpolants.WorldToParticle[0], Interpolants.WorldToParticle[1], Interpolants.WorldToParticle[2], float4(0.0f, 0.0f, 0.0f, 1.0f))));
#		if NEEDS_INSTANCE_WORLD_TO_LOCAL_PS
	Result.InstanceWorldtoLocal = Result.Particle.WorldToParticle;
#		endif // NEEDS_INSTANCE_WORLD_TO_LOCAL_PS
#	endif // USE_PARTICLE_WORLD_TO_LOCAL
#else

#	if NEEDS_PARTICLE_TRANSFORM
	Result.Particle.LocalToWorld[0] = Interpolants.LocalToWorld[0];
	Result.Particle.LocalToWorld[1] = Interpolants.LocalToWorld[1];
	Result.Particle.LocalToWorld[2] = Interpolants.LocalToWorld[2];
	Result.Particle.LocalToWorld[3] = Interpolants.LocalToWorld[3];
#	endif // NEEDS_PARTICLE_TRANSFORM

#	if USE_PARTICLE_LOCAL_TO_WORLD
	Result.Particle.ParticleToWorld = transpose(float4x4(
		Interpolants.ParticleToWorld[0],
		Interpolants.ParticleToWorld[1],
		Interpolants.ParticleToWorld[2],
		float4(0.0f, 0.0f, 0.0f, 1.0f)));
#	endif // USE_PARTICLE_LOCAL_TO_WORLD

#	if USE_PARTICLE_WORLD_TO_LOCAL
	Result.Particle.WorldToParticle = transpose(float4x4(
		Interpolants.WorldToParticle[0],
		Interpolants.WorldToParticle[1],
		Interpolants.WorldToParticle[2],
		float4(0.0f, 0.0f, 0.0f, 1.0f)));
#	endif // USE_PARTICLE_WORLD_TO_LOCAL
#endif // (ENGINE_MAJOR_VERSION == 5)

	//Result.PrevFrameLocalToWorld = ;

	Result.Particle.MotionBlurFade = 1.0f;
	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);
	Result.TwoSidedSign = 1;

#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Result.WorldVertexNormal_Center = Interpolants.TangentToWorld2_Center.xyz;
#endif

	return Result;
}

float4x4 InverseTransform(float4x4 InTransform)
{
	// Extract and invert scale	
	float3	invScale = 1. / float3(length(InTransform[0].xyz), length(InTransform[1].xyz), length(InTransform[2].xyz));

	// Build inv. scale matrix
	float4x4	invScale44 = float4x4(	invScale.x, 0.0f, 0.0f, 0.0f,
										0.0f, invScale.y, 0.0f, 0.0f,
										0.0f, 0.0f, invScale.z, 0.0f,
										0.0f, 0.0f, 0.0f, 1.0f);

	// Apply inverse scale (normalize matrix axis)
	InTransform = mul(invScale44, InTransform);

	// Transpose the matrix (since it has no more scale and we ignore position, it's the inverse rotation matrix)
	float4x4	invRot44 = transpose(InTransform);

	float4x4	invTrans44 = float4x4(	1.0f, 0.0f, 0.0f, 0.0f,
										0.0f, 1.0f, 0.0f, 0.0f,
										0.0f, 0.0f, 1.0f, 0.0f,
										-InTransform[3].xyz, 1.0f);

	return mul(invTrans44, mul(invRot44, invScale44));
}

/** Converts from vertex factory specific input to a FMaterialVertexParameters, which is used by vertex shader material inputs. */
FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
#if (ENGINE_MAJOR_VERSION == 5) && (ENGINE_MINOR_VERSION >= 3)
	FMaterialVertexParameters	Result = MakeInitializedMaterialVertexParameters();
#else
	FMaterialVertexParameters	Result = (FMaterialVertexParameters)0;
#endif // (ENGINE_MAJOR_VERSION == 5) && (ENGINE_MINOR_VERSION >= 3)

#if (ENGINE_MAJOR_VERSION == 5)
	Result.SceneData = Intermediates.SceneData;
#endif // (ENGINE_MAJOR_VERSION == 5)
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.VertexColor;
	Result.PreSkinnedPosition = Input.Position.xyz;
	Result.PreSkinnedNormal = TangentBias(Input.TangentZ.xyz);

	Result.Particle.Color = Intermediates.ParticleColor;
#if USE_PARTICLE_SUBUVS
	Result.Particle.SubUVCoords[0] = Intermediates.EmissiveColor.xy;
	Result.Particle.SubUVCoords[1] = float2(Intermediates.EmissiveColor.z, Intermediates.AtlasRect.x);
	Result.Particle.SubUVLerp = Intermediates.AtlasRect.y;
	Result.Particle.Size = Intermediates.AtlasRect.zw;
#endif
	Result.Particle.RelativeTime = Intermediates.Cursor;

#if (DYNAMIC_PARAMETERS_MASK != 0)
	Result.Particle.DynamicParameterValidMask = PopcornFXUniforms.DynamicParameterMask;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 1)
	Result.Particle.DynamicParameter = Intermediates.DynamicParameter0;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Result.Particle.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Result.Particle.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Result.Particle.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif

	Result.Particle.TranslatedWorldPositionAndSize.xyz = Intermediates.ParticleTranslatedWorldPosition.xyz;
	Result.Particle.TranslatedWorldPositionAndSize.w = 1;

#if (ENGINE_MAJOR_VERSION == 5)
	float4x4	_transform = GetParticleTransform(Intermediates);
	FLWCMatrix	Transform = LWCPromote(_transform);
#else
	float4x4 Transform = GetParticleTransform(Intermediates);
#endif // (ENGINE_MAJOR_VERSION == 5)

	Result.InstanceLocalToWorld = Transform;
#if (ENGINE_MAJOR_VERSION == 5)
	Result.InstanceWorldToLocal = LWCPromoteInverse(InverseTransform(_transform));
#else
#	if NEEDS_PARTICLE_TRANSFORM
	Result.Particle.LocalToWorld[0] = Transform[0];
	Result.Particle.LocalToWorld[1] = Transform[1];
	Result.Particle.LocalToWorld[2] = Transform[2];
	Result.Particle.LocalToWorld[3] = Transform[3];
#	endif // NEEDS_PARTICLE_TRANSFORM
#endif // (ENGINE_MAJOR_VERSION == 5)

#if (ENGINE_MAJOR_VERSION == 5)
	Result.TangentToWorld = mul(TangentToLocal, (float3x3)_transform);
#else
	Result.TangentToWorld = mul(TangentToLocal, (float3x3)Transform);
#endif // (ENGINE_MAJOR_VERSION == 5)

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	for (int CoordinateIndex = 0; CoordinateIndex < NUM_MATERIAL_TEXCOORDS_VERTEX; CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = Intermediates.TexCoords[CoordinateIndex];
	}
#endif

	Result.Particle.ParticleToWorld = Transform;
#if (ENGINE_MAJOR_VERSION == 5)
	Result.Particle.WorldToParticle = Result.InstanceWorldToLocal;
#else
	Result.Particle.WorldToParticle = InverseTransform(Transform);
#endif // (ENGINE_MAJOR_VERSION == 5)
	return Result;
}

#if PREBUILD_BONE_TRANSFORMS
float3x4	ReadBoneMatrix(uint particleID, uint boneID)
{
	float4		X = BoneMatrices[PopcornFXSkelMeshUniforms.BoneMatricesOffset + PopcornFXSkelMeshUniforms.SkinningBufferStride * particleID + boneID * 3 + 0];
	float4		Y = BoneMatrices[PopcornFXSkelMeshUniforms.BoneMatricesOffset + PopcornFXSkelMeshUniforms.SkinningBufferStride * particleID + boneID * 3 + 1];
	float4		Z = BoneMatrices[PopcornFXSkelMeshUniforms.BoneMatricesOffset + PopcornFXSkelMeshUniforms.SkinningBufferStride * particleID + boneID * 3 + 2];
	return float3x4(X,Y,Z);
}

float3x4	ReadPreviousBoneMatrix(uint particleID, uint boneID)
{
	float4		X = PreviousBoneMatrices[PopcornFXSkelMeshUniforms.BoneMatricesOffset + PopcornFXSkelMeshUniforms.SkinningBufferStride * particleID + boneID * 3 + 0];
	float4		Y = PreviousBoneMatrices[PopcornFXSkelMeshUniforms.BoneMatricesOffset + PopcornFXSkelMeshUniforms.SkinningBufferStride * particleID + boneID * 3 + 1];
	float4		Z = PreviousBoneMatrices[PopcornFXSkelMeshUniforms.BoneMatricesOffset + PopcornFXSkelMeshUniforms.SkinningBufferStride * particleID + boneID * 3 + 2];
	return float3x4(X,Y,Z);
}

float3x4	CalcPreviousSkinningTransformsAt(FVertexFactoryInput Input, uint particleID)
{
	float		weightsSum = Input.BoneWeights.x + Input.BoneWeights.y + Input.BoneWeights.z + Input.BoneWeights.w;
	float4		boneWeights = Input.BoneWeights / weightsSum;

	uint4		boneIndices = uint4(PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.x],
									PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.y],
									PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.z],
									PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.w]);

	float3x4	transforms;
	transforms =	ReadPreviousBoneMatrix(particleID, boneIndices.x) * boneWeights.x;
	transforms +=	ReadPreviousBoneMatrix(particleID, boneIndices.y) * boneWeights.y;
	transforms +=	ReadPreviousBoneMatrix(particleID, boneIndices.z) * boneWeights.z;
	transforms +=	ReadPreviousBoneMatrix(particleID, boneIndices.w) * boneWeights.w;
	return transforms;
}
#endif // PREBUILD_BONE_TRANSFORMS

#if PREBUILD_BONE_TRANSFORMS
float3x4	CalcSkinningTransformsAt(FVertexFactoryInput Input, uint particleID)
#else
float3x4	CalcSkinningTransformsAt(FVertexFactoryInput Input, float animCursor, uint trackID)
#endif // PREBUILD_BONE_TRANSFORMS
{
	float		weightsSum = Input.BoneWeights.x + Input.BoneWeights.y + Input.BoneWeights.z + Input.BoneWeights.w;
	float4		boneWeights = Input.BoneWeights / weightsSum;

	uint4		boneIndices = uint4(PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.x],
									PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.y],
									PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.z],
									PopcornFXSkelMeshUniforms.BoneIndicesReorder[BoneIndicesReorderOffset + Input.BoneIndices.w]);

#if PREBUILD_BONE_TRANSFORMS
	float3x4	transforms;
	transforms =	ReadBoneMatrix(particleID, boneIndices.x) * boneWeights.x;
	transforms +=	ReadBoneMatrix(particleID, boneIndices.y) * boneWeights.y;
	transforms +=	ReadBoneMatrix(particleID, boneIndices.z) * boneWeights.z;
	transforms +=	ReadBoneMatrix(particleID, boneIndices.w) * boneWeights.w;
#else
	float2		pixelUVSize = PopcornFXSkelMeshUniforms.InvSkeletalAnimationTextureDimensions;

	float		animCursorToUVRange = animCursor * (1.0f - pixelUVSize.x);
	float		animCursorToPrevPixel = fmod(animCursorToUVRange, pixelUVSize.x);
	float		snappedAnimCursor = (animCursorToUVRange - animCursorToPrevPixel) + pixelUVSize.x * 0.5f;

	float		animationUVOffset = PopcornFXSkelMeshUniforms.SkeletalAnimationYOffsetPerTrack * (float)trackID;

	float3x4	transforms;
	transforms = ExtractBoneTransforms(snappedAnimCursor, pixelUVSize.y, animationUVOffset, boneIndices.x) * boneWeights.x;
	[branch]
	if (Input.BoneWeights.y > 0.0f)
	{
		transforms += ExtractBoneTransforms(snappedAnimCursor, pixelUVSize.y, animationUVOffset, boneIndices.y) * boneWeights.y;
		[branch]
		if (Input.BoneWeights.z > 0.0f)
		{
			transforms += ExtractBoneTransforms(snappedAnimCursor, pixelUVSize.y, animationUVOffset, boneIndices.z) * boneWeights.z;
			[branch]
			if (Input.BoneWeights.w > 0.0f)
				transforms += ExtractBoneTransforms(snappedAnimCursor, pixelUVSize.y, animationUVOffset, boneIndices.w) * boneWeights.w;
		}
	}
	[branch]
	if (PopcornFXSkelMeshUniforms.LinearInterpolateTransforms != 0)
	{
		float	snappedAnimCursor1 = (animCursorToUVRange + (pixelUVSize.x - animCursorToPrevPixel)) + pixelUVSize.x * 0.5f;
		float	cursor = animCursorToPrevPixel / pixelUVSize.x;

		float3x4	transforms1;
		transforms1 = ExtractBoneTransforms(snappedAnimCursor1, pixelUVSize.y, animationUVOffset, boneIndices.x) * Input.BoneWeights.x;
		[branch]
		if (Input.BoneWeights.y > 0.0f)
		{
			transforms1 += ExtractBoneTransforms(snappedAnimCursor1, pixelUVSize.y, animationUVOffset, boneIndices.y) * Input.BoneWeights.y;
			[branch]
			if (Input.BoneWeights.z > 0.0f)
			{
				transforms1 += ExtractBoneTransforms(snappedAnimCursor1, pixelUVSize.y, animationUVOffset, boneIndices.z) * Input.BoneWeights.z;
				[branch]
				if (Input.BoneWeights.w > 0.0f)
					transforms1 += ExtractBoneTransforms(snappedAnimCursor1, pixelUVSize.y, animationUVOffset, boneIndices.w) * Input.BoneWeights.w;
			}
		}

		return LerpSkinningTransforms(transforms, transforms1, cursor);
	}
#endif // PREBUILD_BONE_TRANSFORMS
	return transforms;
}

float3x4	CalcSkinningTransforms(FVertexFactoryInput Input)
{
	uint		particleID = GetInstanceId(Input.InstanceId); // Necessary for VR Instanced Stereo rendering (returns Input.InstanceId / 2)

#if PREBUILD_BONE_TRANSFORMS
	float3x4	transforms = CalcSkinningTransformsAt(Input, particleID);
#else
	float		animCursor0 = PKSimData_Loadf(particleID, PopcornFXSkelMeshUniforms.InVATCursorsOffset);
	uint		animationId0 = PKSimData_Loadi(particleID, PopcornFXSkelMeshUniforms.InVATTracksOffset);
	float3x4	transforms = CalcSkinningTransformsAt(Input, animCursor0, animationId0);

	[branch]
	if (PopcornFXSkelMeshUniforms.LinearInterpolateTracks != 0)
	{
		float		animCursor1 = PKSimData_Loadf(particleID, PopcornFXSkelMeshUniforms.InVATCursorNextsOffset);
		uint		animationId1 = PKSimData_Loadi(particleID, PopcornFXSkelMeshUniforms.InVATTrackNextsOffset);
		float		transitionCursor = PKSimData_Loadf(particleID, PopcornFXSkelMeshUniforms.InVATTransitionCursorsOffset);
		float3x4	transforms1 = CalcSkinningTransformsAt(Input, animCursor1, animationId1);
		transforms = LerpSkinningTransforms(transforms, transforms1, transitionCursor);
	}
#endif // PREBUILD_BONE_TRANSFORMS
	return transforms;
}

float3x4	CalcPreviousSkinningTransforms(FVertexFactoryInput Input)
{
#if PREBUILD_BONE_TRANSFORMS
	uint		particleID = GetInstanceId(Input.InstanceId); // Necessary for VR Instanced Stereo rendering (returns Input.InstanceId / 2)
	float3x4	transforms = CalcPreviousSkinningTransformsAt(Input, particleID);
	return transforms;
#else
	return CalcSkinningTransforms(Input);
#endif
}

float3	SkinPosition(float3 localPosition, float3x4 SkinningMatrix)
{
	float3	skinnedPosition = mul(SkinningMatrix, float4(localPosition, 1.0f)).xyz;
	return skinnedPosition;
}

float4 CalcWorldPosition(FVertexFactoryInput Input, float4x4 l2wTransform, float3x4 SkinningMatrix, float3 PreViewTranslation)
{
	float3	skinnedPosition = SkinPosition(Input.Position.xyz, SkinningMatrix);

#if (ENGINE_MAJOR_VERSION == 5)
	float3 WorldPosition = mul(float4(skinnedPosition, 1.0f), l2wTransform).xyz + PreViewTranslation;
#else
	float3 WorldPosition = mul(float4(skinnedPosition, 1.0f), l2wTransform).xyz + PreViewTranslation;
#endif // (ENGINE_MAJOR_VERSION == 5)
	return float4(WorldPosition, Input.Position.w);
}

float3x3	SkinTangents(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3x3	Result = 0;
	float3x3	skinningMatrix = (float3x3)Intermediates.SkinningMatrix;
	float4		TangentZ = TangentBias(Input.TangentZ);

	// pass-thru the tangent
	Result[0] = normalize(mul(skinningMatrix, TangentBias(Input.TangentX))).xyz;
	// pass-thru the normal
	Result[2] = normalize(mul(skinningMatrix, TangentZ.xyz)).xyz;

	// derive the binormal by getting the cross product of the normal and tangent
	Result[1] = cross(Result[2], Result[0]) * TangentZ.w;
	// Recalculate TangentX off of the other two vectors
	// This corrects quantization error since TangentX was passed in as a quantized vertex input
	// The error shows up most in specular off of a mesh with a smoothed UV seam (normal is smooth, but tangents vary across the seam)
	Result[0] = cross(Result[1], Result[2]) * TangentZ.w;

	return Result;
}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates = (FVertexFactoryIntermediates)0;
#if (ENGINE_MAJOR_VERSION == 5)
	Intermediates.SceneData = VF_GPUSCENE_GET_INTERMEDIATES(Input);
#endif // (ENGINE_MAJOR_VERSION == 5)
	// Swizzle vertex color.
	Intermediates.VertexColor = Input.VertexColor FCOLOR_COMPONENT_SWIZZLE;

	uint		particleID = GetInstanceId(Input.InstanceId); // Necessary for VR Instanced Stereo rendering (returns Input.InstanceId / 2)
	float4x4	ParticleToWorld = PKSimData_Load4x4f(particleID, PopcornFXSkelMeshUniforms.InMatricesOffset);
	float3		ParticleWorldPosition = ParticleToWorld[3].xyz;

	// World position.
#if NEEDS_PARTICLE_TRANSFORM // UE4
	Intermediates.LocalToWorld[0] = ParticleToWorld[0];
	Intermediates.LocalToWorld[1] = ParticleToWorld[1];
	Intermediates.LocalToWorld[2] = ParticleToWorld[2];
	Intermediates.LocalToWorld[3] = ParticleToWorld[3];
#endif

#if (ENGINE_MAJOR_VERSION == 5)
	Intermediates.ParticleTranslatedWorldPosition = ParticleWorldPosition + LWCHackToFloat(ResolvedView.PreViewTranslation).xyz;
#else
	Intermediates.ParticleTranslatedWorldPosition = ParticleWorldPosition + ResolvedView.PreViewTranslation.xyz;
#endif // (ENGINE_MAJOR_VERSION == 5)
	
	BRANCH
	if (PopcornFXSkelMeshUniforms.InColorsOffset != -1)
		Intermediates.ParticleColor = PKSimData_Load4f(particleID, PopcornFXSkelMeshUniforms.InColorsOffset);
	BRANCH
	if (PopcornFXSkelMeshUniforms.InEmissiveColorsOffset != -1)
		Intermediates.EmissiveColor = PKSimData_Load3f(particleID, PopcornFXSkelMeshUniforms.InEmissiveColorsOffset);

	BRANCH
	if (PopcornFXSkelMeshUniforms.InAlphaCursorsOffset != -1)
		Intermediates.Cursor = PKSimData_Loadf(particleID, PopcornFXSkelMeshUniforms.InAlphaCursorsOffset);

#if (DYNAMIC_PARAMETERS_MASK & 1)
	BRANCH
	if (PopcornFXSkelMeshUniforms.InDynamicParameter0sOffset != -1)
		Intermediates.DynamicParameter0 = PKSimData_Load4f(particleID, PopcornFXSkelMeshUniforms.InDynamicParameter0sOffset);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	BRANCH
	if (PopcornFXSkelMeshUniforms.InDynamicParameter1sOffset != -1)
		Intermediates.DynamicParameter1 = PKSimData_Load4f(particleID, PopcornFXSkelMeshUniforms.InDynamicParameter1sOffset);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	BRANCH
	if (PopcornFXSkelMeshUniforms.InDynamicParameter2sOffset != -1)
		Intermediates.DynamicParameter2 = PKSimData_Load4f(particleID, PopcornFXSkelMeshUniforms.InDynamicParameter2sOffset);
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	BRANCH
	if (PopcornFXSkelMeshUniforms.InDynamicParameter3sOffset != -1)
		Intermediates.DynamicParameter3 = PKSimData_Load4f(particleID, PopcornFXSkelMeshUniforms.InDynamicParameter3sOffset);
#endif
	Intermediates.AtlasRect = float4(1, 1, 0, 0); // identity
	BRANCH
	if (PopcornFXSkelMeshUniforms.InTextureIDsOffset != -1)
	{
		// Resolve UVs from rectangle list
		const float		textureID = PKSimData_Loadf(particleID, PopcornFXSkelMeshUniforms.InTextureIDsOffset);
		const uint		atlasID = min((uint)abs(textureID), PopcornFXSkelMeshUniforms.AtlasRectCount - 1);
		const float4	rect = PopcornFXSkelMeshUniforms.AtlasBuffer[atlasID];

		Intermediates.AtlasRect = rect;
	}

#if NUM_MATERIAL_TEXCOORDS_VERTEX
	Intermediates.TexCoords[0] = Input.TexCoords0;
	#if NUM_MATERIAL_TEXCOORDS_VERTEX > 1
		Intermediates.TexCoords[1] = Input.TexCoords1;
	#endif
	#if NUM_MATERIAL_TEXCOORDS_VERTEX > 2
		Intermediates.TexCoords[2] = Input.TexCoords2;
	#endif
	#if NUM_MATERIAL_TEXCOORDS_VERTEX > 3
		Intermediates.TexCoords[3] = Input.TexCoords3;
	#endif
#endif

	float4x4	WorldToParticle = InverseTransform(ParticleToWorld);
	Intermediates.ParticleToWorld = ParticleToWorld;
	Intermediates.WorldToParticle = WorldToParticle;
	Intermediates.PrevParticleToWorld = PKSimData_Load4x4f(particleID, PopcornFXSkelMeshUniforms.InPrevMatricesOffset);

	Intermediates.SkinningMatrix = CalcSkinningTransforms(Input);
	Intermediates.PrevSkinningMatrix = CalcPreviousSkinningTransforms(Input);
	Intermediates.TangentToLocal = SkinTangents(Input, Intermediates);

	return Intermediates;
}

/**
* Get the 3x3 tangent basis vectors for this vertex factory
* this vertex factory will calculate the binormal on-the-fly
*
* @param Input - vertex input stream structure
* @return 3x3 matrix
*/
float3x3 VertexFactoryGetTangentToLocal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToLocal;
}

// @return translated world position
float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4	l2wTransform = GetParticleTransform(Intermediates);
#if (ENGINE_MAJOR_VERSION == 5)
	return CalcWorldPosition(Input, l2wTransform, Intermediates.SkinningMatrix, LWCHackToFloat(ResolvedView.PreViewTranslation));
#else
	return CalcWorldPosition(Input, l2wTransform, Intermediates.SkinningMatrix, ResolvedView.PreViewTranslation);
#endif // (ENGINE_MAJOR_VERSION == 5)
}

// since 4.12
float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float4x4	Transform = GetParticleTransform(Intermediates);
	float3x3	TangentToWorld = mul(Intermediates.TangentToLocal, (float3x3)Transform);

	// Normalize to remove scaling. Incorrect but faster than computing the inverse-transpose.
	TangentToWorld0 = normalize(TangentToWorld[0]);
#if (ENGINE_MAJOR_VERSION == 5)
	TangentToWorld2 = float4(normalize(TangentToWorld[2]), TangentBias(Input.TangentZ.w) * GetPrimitive_DeterminantSign_FromFlags(Primitive.Flags));
#else
	TangentToWorld2 = float4(normalize(TangentToWorld[2]), TangentBias(Input.TangentZ.w) * Primitive.InvNonUniformScaleAndDeterminantSign.w);
#endif // (ENGINE_MAJOR_VERSION == 5)
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;

#if NUM_TEX_COORD_INTERPOLATORS
	// Ensure the unused components of the last packed texture coordinate are initialized.
	Interpolants.TexCoords[(NUM_TEX_COORD_INTERPOLATORS + 1) / 2 - 1] = 0;

	float2 CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS];
	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	UNROLL
	for (int CoordinateIndex = 0; CoordinateIndex * 2 + 1 < NUM_TEX_COORD_INTERPOLATORS; ++CoordinateIndex)
	{
		Interpolants.TexCoords[CoordinateIndex].xy = CustomizedUVs[CoordinateIndex * 2];
		Interpolants.TexCoords[CoordinateIndex].wz = CustomizedUVs[CoordinateIndex * 2 + 1];
	}
#	if NUM_TEX_COORD_INTERPOLATORS & 1
		Interpolants.TexCoords[NUM_TEX_COORD_INTERPOLATORS / 2].xy = CustomizedUVs[NUM_TEX_COORD_INTERPOLATORS - 1];
#	endif // #if NUM_TEX_COORD_INTERPOLATORS & 1
#endif

	Interpolants.TangentToWorld0.w = 0;
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#if USE_WORLDVERTEXNORMAL_CENTER_INTERPOLATION
	Interpolants.TangentToWorld2_Center = Interpolants.TangentToWorld2;
#endif

#if INTERPOLATE_VERTEX_COLOR
	Interpolants.VertexColor = Intermediates.VertexColor;
#endif

#if NEEDS_PARTICLE_COLOR
	Interpolants.ParticleColor = Intermediates.ParticleColor;
#endif
	Interpolants.EmissiveColor = Intermediates.EmissiveColor;
	Interpolants.Cursor = Intermediates.Cursor;

#if (DYNAMIC_PARAMETERS_MASK & 1)
	Interpolants.DynamicParameter0 = Intermediates.DynamicParameter0;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 2)
	Interpolants.DynamicParameter1 = Intermediates.DynamicParameter1;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 4)
	Interpolants.DynamicParameter2 = Intermediates.DynamicParameter2;
#endif
#if (DYNAMIC_PARAMETERS_MASK & 8)
	Interpolants.DynamicParameter3 = Intermediates.DynamicParameter3;
#endif

#if USE_PARTICLE_POSITION
	Interpolants.ParticleTranslatedWorldPosition = Intermediates.ParticleTranslatedWorldPosition;
#endif
#if NEEDS_PARTICLE_TRANSFORM
	Interpolants.LocalToWorld = Intermediates.LocalToWorld;
#endif

#if USE_PARTICLE_LOCAL_TO_WORLD
	Interpolants.ParticleToWorld = (float3x4) transpose(Intermediates.ParticleToWorld);
#endif

#if USE_PARTICLE_WORLD_TO_LOCAL
	Interpolants.WorldToParticle = (float3x4) transpose(Intermediates.WorldToParticle);
#endif

#if INSTANCED_STEREO
	Interpolants.EyeIndex = 0;
#endif

#if USE_PARTICLE_SUBUVS
	Interpolants.AtlasRect = Intermediates.AtlasRect;
#endif

	return Interpolants;
}

// @return previous translated world position
float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4	l2wTransform = GetPrevParticleTransform(Intermediates);
#if (ENGINE_MAJOR_VERSION == 5)
	return CalcWorldPosition(Input, l2wTransform, Intermediates.PrevSkinningMatrix, LWCHackToFloat(ResolvedView.PrevPreViewTranslation));
#else
	return CalcWorldPosition(Input, l2wTransform, Intermediates.PrevSkinningMatrix, ResolvedView.PrevPreViewTranslation);
#endif // (ENGINE_MAJOR_VERSION == 5)
}

#if USING_TESSELLATION
struct FVertexFactoryInterpolantsVSToDS
{
	FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
};

float2 VertexFactoryGetTextureCoordinateDS(FVertexFactoryInterpolantsVSToDS Interpolants)
{
#if NUM_MATERIAL_TEXCOORDS
	return Interpolants.InterpolantsVSToPS.TexCoords[0].xy;
#else // #if NUM_MATERIAL_TEXCOORDS
	return float2(0, 0);
#endif // #if NUM_MATERIAL_TEXCOORDS
}

FVertexFactoryInterpolantsVSToPS VertexFactoryAssignInterpolants(FVertexFactoryInterpolantsVSToDS Input)
{
	return Input.InterpolantsVSToPS;
}

/** Converts from vertex factory specific interpolants to a FMaterialTessellationParameters, which is used by material inputs. */
FMaterialTessellationParameters GetMaterialTessellationParameters(FVertexFactoryInterpolantsVSToDS Interpolants, float3 CameraLocalWorldPosition)
{
	FMaterialTessellationParameters	Result;
#if NUM_TEX_COORD_INTERPOLATORS
	UNROLL
	for(int CoordinateIndex = 0;CoordinateIndex < NUM_TEX_COORD_INTERPOLATORS;CoordinateIndex += 2)
	{
		Result.TexCoords[CoordinateIndex] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].xy;
		if(CoordinateIndex + 1 < NUM_TEX_COORD_INTERPOLATORS)
		{
			Result.TexCoords[CoordinateIndex + 1] = Interpolants.InterpolantsVSToPS.TexCoords[CoordinateIndex/2].wz;
		}
	}
#endif

	Result.VertexColor = float4(1, 1, 1, 1);

	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
	Result.TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);
	Result.TangentToWorldPreScale = 1;
	Result.WorldPosition = CameraLocalWorldPosition + ResolvedView.WorldCameraOrigin.xyz;

	return Result;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryGetInterpolantsVSToDS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToDS Interpolants;
	Interpolants.InterpolantsVSToPS = VertexFactoryGetInterpolantsVSToPS(Input, Intermediates, VertexParameters);
	return Interpolants;
}

FVertexFactoryInterpolantsVSToDS VertexFactoryInterpolate(FVertexFactoryInterpolantsVSToDS a, float aInterp, FVertexFactoryInterpolantsVSToDS b, float bInterp)
{
	FVertexFactoryInterpolantsVSToDS O;

	// Do we really need to interpolate TangentToWorld2 here? It should be replaced by the
	// interpolated normal from 'whatever' interpolation scheme we're using

	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld0.xyz);
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TangentToWorld2);
#if INTERPOLATE_VERTEX_COLOR
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.VertexColor);
#endif

#if NEEDS_PARTICLE_COLOR
	TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.ParticleColor);
#endif

#if NUM_TEX_COORD_INTERPOLATORS
	for (int i = 0; i < (NUM_TEX_COORD_INTERPOLATORS + 1) / 2; ++i)
	{
		TESSELLATION_INTERPOLATE_MEMBER(InterpolantsVSToPS.TexCoords[i]);
	}
#endif

	return O;
}

float3x3 VertexFactoryGetTangentToLocalDS(FVertexFactoryInterpolantsVSToDS Interpolants)
{
	// This duplicates stuff already going on in GetMaterialTessellationParameters(), so
	// maybe the hull shader could leverage that instead?
	half3 TangentToWorld0 = Interpolants.InterpolantsVSToPS.TangentToWorld0.xyz;
	half4 TangentToWorld2 = Interpolants.InterpolantsVSToPS.TangentToWorld2;
	float3x3 TangentToWorld = AssembleTangentToWorld(TangentToWorld0, TangentToWorld2);

	return TangentToWorld;
}
#endif // #if USING_TESSELLATION

float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return TangentBias(Input.TangentZ.xyz);
}

#if (ENGINE_MAJOR_VERSION == 5)
#	include "/Engine/Private/VertexFactoryDefaultInterface.ush"
#endif // (ENGINE_MAJOR_VERSION == 5)